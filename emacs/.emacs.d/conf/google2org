#!/bin/env bash

# Default converter
CONVERTER="`pwd`/ical2org.awk"

# Display the usage message
function usage {
    echo "usage: google2org [-h] [-c CONVERTER] url orgfile"
    echo
    echo "Convert a google calendar url to an org document."
    echo
    echo "To find the url, go to your google calendar settings,"\
         "go to the calendars tab and find the calendar you want"\
         "to export. Select this calendar and click the ICAL button"\
         "in the \"Private Address\" cell."
    echo
    echo "positional arguments:"
    echo -e "  url    \tThe url to read the calendar data from."
    echo -e "  orgfile\tThe file to write the results to."
    echo
    echo "optional arguments:"
    echo -e "  -h, --help     \tShow this help message and exit."
    echo -e "  -c, --converter\tThe ical2org converter to be used."\
         "Defaults to an ical2org.awk file in pwd."
}

# Test for GNU getopt
getopt -T
if [ $? -ne 4 ]; then
    echo "This script requires GNU getopt." >&2
    exit 1
fi

# Parse arguments
ARGS=`getopt -o hc: -l help,converter: -n 'google2org' -- "$@"`
if [ $? -ne 0 ]; then
    exit 1
fi
eval set -- "$ARGS"

while true; do
    case "$1" in
        -c | --converter)
            CONVERTER="$2"
            shift 2
            ;;

        -h | --help)
            usage
            exit
            ;;

        --)
            shift
            break
            ;;

        *)
            echo "Internal error. Check your getopt installation." >&2
            exit 1
            ;;
    esac
done

if [ $# -ne 2 ]; then
    echo "Not enough arguments."
    usage
    exit 1
fi

# Create a temp file
ical=`mktemp /tmp/google2org.XXXXXXX`
# Open a file descriptor and schedule the file for removal for when we
# are done or a crash occurs.
exec 3<>"$ical"
rm "$ical"

# Download the ical file
curl -s "$1" >&3

# Convert the file
"$CONVERTER" <&3 > "$2"
