#!/usr/bin/env python3

import os
import sys
import argparse
import pathlib
import subprocess
import shutil

from typing import Any
from xdg import XDG_DATA_HOME
from ruamel.yaml import YAML


def main():
    print("Path", os.getenv("PATH"), file=sys.stderr)

    parser = argparse.ArgumentParser()
    parser.add_argument("--sops-file", default=XDG_DATA_HOME / "credentials.yaml")
    parser.add_argument(
        "--key-fingerprints", default="535B61015823443941C744DD12264F6BBDFABA89"
    )
    parser.add_argument("key")
    args = parser.parse_args()

    try:
        print(get_key_from_sops_file(**vars(args)), end='\n')
    except Exception as err:
        print(err, file=sys.stderr)
        sys.exit(1)


def get_key_from_sops_file(
    sops_file: pathlib.Path, key_fingerprints: str, key: str
) -> Any:
    # Set up the yaml parser
    yaml = YAML(typ="safe")

    # Set the PGP fingerprints with which to decrypt
    env = dict(os.environ)
    env.update({"SOPS_PGP_FP": key_fingerprints})

    # Figure out where the sops binary is
    sops = shutil.which("sops")
    if sops is None:
        raise EnvironmentError("No sops binary found")

    # Grab the secrets file
    secrets = subprocess.check_output([sops, "-d", str(sops_file)], env=env)

    # Parse and get the key
    return yaml.load(secrets).get(key)


if __name__ == "__main__":
    main()
